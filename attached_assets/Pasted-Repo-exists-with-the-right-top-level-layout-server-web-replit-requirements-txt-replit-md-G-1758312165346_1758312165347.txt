Repo exists with the right top-level layout: server/, web/, .replit, requirements.txt, replit.md. 
GitHub

README brands it as Underwriting Wizard, lists FastAPI backend on :8000, React frontend, health/docs endpoints, and your public/auth routes (e.g., /api/public/deals, /api/background/check, /api/deals/{deal_id}/accept|decline). 
GitHub

Likely mismatches to fix (fast)

These are inconsistencies between your README and the implementation we’ve been hardening. They’re small but important:

Background route name

README shows POST /api/background/check; earlier code samples used /api/background/run.

Action: ensure the actual route is /api/background/check, and that it’s idempotent (uses capture_body / require_idempotency / store_idempotent). Also make sign/send explicitly gate on the latest background.result for that deal_id. 
GitHub

Deal offer acceptance routes

README adds POST /api/deals/{deal_id}/accept and /decline.

Action: add idempotency guards to both; each should emit offer.accepted / offer.declined events with deal_id + tenant_id in data_json. 
GitHub

CORS env var name

README mentions CORS_ORIGIN (singular) while our config pattern uses CORS_ORIGINS (CSV list).

Action: pick one. I recommend CORS_ORIGINS and support "*" in dev, comma list in staging. Update README and server/core/config.py. 
GitHub

Auto DB init on startup (dev)

README says “Database tables auto-created on startup”.

Action: in server/main.py call init_dev_sqlite_if_needed(Base) so Replit works without Alembic. 
GitHub

Events schema consistency

Ensure every event write uses data_json=... (never data=) and includes deal_id (and tenant_id when known). This is critical for your admin screens and audit trail.

Tell Replit Agent to verify & patch (copy-paste)

Step 1 — create a quick verifier

mkdir -p scripts
cat > scripts/verify_now.sh << 'EOF'
#!/usr/bin/env bash
set -e; FAIL=0
ok(){ echo "✔ $1"; }; no(){ echo "✘ $1"; FAIL=1; }

# Files we expect
for f in ".replit" "requirements.txt" "server/main.py" \
         "server/core/config.py" "server/core/idempotency.py" \
         "server/services/storage.py" "server/models/event.py" "server/models/deal.py" \
         "server/routes/documents.py" "server/routes/offers.py" \
         "server/routes/sign.py" "server/routes/sms.py" "server/routes/background.py"
do [ -f "$f" ] && ok "exists: $f" || no "missing: $f"; done

# CORS var (prefer plural)
grep -q "CORS_ORIGINS" server/core/config.py && ok "CORS_ORIGINS present" || no "CORS_ORIGINS not found"

# Background route name and idempotency
grep -qE "APIRouter\\(prefix=.*background" server/routes/background.py && ok "background router" || no "background router missing"
grep -q "/background/check" server/routes/background.py && ok "route: /api/background/check" || no "route not named /background/check"
grep -q "Depends\\(capture_body\\)" server/routes/background.py && ok "background: capture_body" || no "background: capture_body missing"
grep -q "require_idempotency" server/routes/background.py && ok "background: require_idempotency" || no "background: require_idempotency missing"

# Accept/Decline endpoints + idempotency + events
grep -q "/deals/.*/accept" server/routes/offers.py && ok "accept endpoint present" || no "accept endpoint missing"
grep -q "/deals/.*/decline" server/routes/offers.py && ok "decline endpoint present" || no "decline endpoint missing"
grep -q "offer.accepted" server/routes/offers.py && ok "event: offer.accepted" || no "event: offer.accepted missing"
grep -q "offer.declined" server/routes/offers.py && ok "event: offer.declined" || no "event: offer.declined missing"
grep -q "Depends\\(capture_body\\)" server/routes/offers.py && ok "offers: capture_body" || no "offers: capture_body missing"
grep -q "require_idempotency" server/routes/offers.py && ok "offers: require_idempotency" || no "offers: require_idempotency missing"

# Sign gating against background.result
grep -q "background.result" server/routes/sign.py && ok "sign: checks background.result" || no "sign: background gate missing"

# Deal default status open
grep -Eq 'status\\s*=.*default\\s*=\\s*\"open\"' server/models/deal.py && ok "deal default=open" || no "deal default not open"

# Local storage fallback marker
grep -q "data/uploads" server/services/storage.py && ok "local storage fallback" || no "local storage fallback missing"

# Start a quick health check
( pkill -f "uvicorn .*server\\.main:app" >/dev/null 2>&1 || true
  nohup uvicorn server.main:app --host 0.0.0.0 --port 8000 >/tmp/uw.log 2>&1 & sleep 2
  curl -sf http://localhost:8000/api/healthz >/dev/null && ok "healthz OK" || no "healthz failed"
  pkill -f "uvicorn .*server\\.main:app" >/dev/null 2>&1 || true
) || true

[ $FAIL -eq 0 ] && echo "ALL PASS" || (echo "Some checks failed"; exit 1)
EOF
chmod +x scripts/verify_now.sh
bash scripts/verify_now.sh


Step 2 — apply the 3 quick patches if the script flags them

Rename/ensure background route in server/routes/background.py:

Use router = APIRouter(prefix="/api/background", tags=["background"])

Endpoint should be @router.post("/check", dependencies=[Depends(capture_body)])

Guard with tenant_id=Depends(require_idempotency) and return a payload; log background.result (include deal_id) via data_json.

Add accept/decline in server/routes/offers.py (idempotent):

POST /api/deals/{deal_id}/accept → write offer.accepted

POST /api/deals/{deal_id}/decline → write offer.declined

All Event(...) calls use data_json=json.dumps({...}), include deal_id & tenant_id.

CORS var

In server/core/config.py, support CORS_ORIGINS (CSV). In dev, allow "*"; in staging, set domains.

Step 3 — 60-sec smoke

# Run server
uvicorn server.main:app --host 0.0.0.0 --port 8000 --reload &
sleep 2

# Health
curl -s http://localhost:8000/api/healthz

# Create a deal (idempotent)
curl -s -X POST http://localhost:8000/api/deals/start \
 -H "Content-Type: application/json" -H "X-Tenant-ID:T1" -H "Idempotency-Key:k1" \
 -d '{"merchant_hint":{"phone":"+19735550188","legal_name":"Maple Deli LLC"},"create_if_missing":true}'

# Background
curl -s -X POST "http://localhost:8000/api/background/check?merchant_id=MID&deal_id=DID" \
 -H "X-Tenant-ID:T1" -H "Idempotency-Key:k2"

# Accept offer (idempotent)
curl -s -X POST "http://localhost:8000/api/deals/DID/accept" \
 -H "X-Tenant-ID:T1" -H "Idempotency-Key:k3" -H "Content-Type: application/json" -d "{}"

# Public deals (PII redacted)
curl -s http://localhost:8000/api/public/deals | head


If the verify script prints any ✘, tell me the filename it flagged and I’ll give you the exact 3–5 line patch. From what I can see on GitHub, your structure and README look solid; the three items above are the only likely footguns before a pilot. 
GitHub