Gaps that block “minimum automation” (must-add)

Core data model is missing

There are no merchant, company, deal/application, document, or metrics_snapshot tables.

Result: your analysis & offers are stateless—they don’t attach to a merchant or deal and can’t support “new deal for existing company”.

Add (SQLite first, easy to scale later):

tenants (for multi-company future), merchants (legal entity), deals (one funding opportunity), documents (bank statements), metrics_snapshots, offers, events (you already have), consents (you partly have via clients).

Attach every action (docs upload, metrics calc, offers, background check, signing) to a deal_id.

Entity resolution (existing vs new)

Needed to find & verify returning merchants and avoid duplicate companies.

Match on EIN, phone/email, and (if needed) fuzzy legal name + state/zip → return an open deal or start a new one.

Add endpoints:

GET /api/merchants/resolve?phone=&email=&ein=&legal_name=

POST /api/deals/start → reuse open deal or create new; idempotent.

“Ask-only-what’s-missing” intake

Your API exposes raw metrics/offers, but there’s no intake state.

Store field values in a simple field_state table (field_id, value, source, last_verified_at).

Endpoint returns missing/expired fields so the bot only asks what’s needed.

Add:

POST /api/intake/answer → upsert fields, respond with { missing:[], confirm:[] }.

Persist statements + metrics

POST /api/docs/bank/upload should attach 3 PDFs to the active deal, parse, and store a metrics_snapshot.

Recompute metrics when newer statements arrive.

Add:

POST /api/deals/{deal_id}/metrics/recompute (re-use latest docs or Plaid).

Underwriting guardrails before offers

Encode your rules: CA requires 4 months, true revenue (exclude transfers/funding), max NSF, negative days, withhold %, positions (other lenders pulling daily/weekly).

Block/route to review if thresholds fail.

Do now: implement rule checks in offers-engine.ts (you already accept overrides), and add a pre-offer validator.

CLEAR, courts, ownership checks (automation path)

Your CLEAR code is a stub. Wire a server-side connector that returns flags only (OK/Review/Decline) plus reason codes; keep raw PII server-only.

NYSCEF court check: add a scraper or third-party gateway with ToS review, and treat results as advisory flags for human review.

EIN/SSN(4) + SOS ownership: queue lookups and store flags.

Multi-tenant + connectors per tenant

connectors table is global today. Make it {tenant_id, name, encrypted_config} so each client company can plug in their Plaid/Cherry/Sign/CLEAR keys.

Queueing & throughput

For 100k SMS/day, you’ll need a queue: Redis + BullMQ (or Rabbit/Work queues).

Batch sends, rate management per A2P 10DLC/short code/toll-free.

Move PDF parsing, background checks, and signing webhooks to async jobs.

Migrate off Pipedrive

Build an ETL that ingests Pipedrive Organizations/Persons/Deals/Attachments into your new schema.

Maintain Pipedrive → UW Wizard id maps; after cutover, lock Pipedrive to read-only.

Front-end gaps (testable UI)

Your repo ships the backend + a doc (FRONTEND_SETUP.md) but no UI.

You’ll want: Chat intake (Chad persona), Campaigns with A/B + scheduling + segments, Connectors, Mapping Studio, Triggers, Deals/Docs view.

We already drafted these pages for you earlier—wire them to the new endpoints above.