0) Why this build

We need a standalone app I can test end-to-end: Connectors page, Chatbot, Merchants DB, Mapping Studio, Triggers + Email, OpenAI parsing of bank statements, Offer engine, Background check, Signing. It must also ship an embeddable widget and a REST API so other apps can drop it in.

1) Tech & project layout
/server  FastAPI, SQLite, SQLAlchemy, httpx, cryptography
/web     Vite + React + TypeScript + Tailwind + Zustand + React Router


Server deps: fastapi uvicorn[standard] SQLAlchemy httpx python-multipart cryptography pydantic
Web deps: react react-dom react-router-dom zustand tailwindcss postcss autoprefixer uuid

.env

DATABASE_URL=sqlite:///./data.db
ENCRYPTION_KEY=<Fernet 32-byte base64>    # required (for connectors & email creds)
API_KEY_PARTNER=dev_key                   # protects write routes
MOCK_MODE=true                            # stubs for external APIs
OPENAI_API_KEY=...                        # optional; if absent, use rationales stub


Run dev with both servers; for preview, serve /web/dist via FastAPI.

2) Canonical data schema (bot’s “language”)

Business: business.legal_name, dba, address, city, state, zip, ein, start_date, website
Owner: owner.first, owner.last, owner.dob, owner.ssn_last4
Contact: contact.phone, contact.email
Each stored as { value, source, last_verified_at, confidence } with expiresDays from catalog.

3) Connectors (encrypted at rest)

Providers (cards in UI): Plaid, Cherry SMS, DocuSign, Dropbox Sign, CLEAR, Email (SendGrid/Postmark/SES), CRMs (Salesforce/HubSpot/Zoho/Pipedrive), CSV.

API

POST /api/connectors {name, config} → encrypt & save

GET /api/connectors → list names

POST /api/connectors/validate {name, live?} → structure + optional live ping

Mask secrets in reads; never log secrets.

4) Field Mapping + CRM Bridge (multi-tenant)

Tables: tenant, connector, mapping(tenant_id, source, version, status, spec_json)

Mapping DSL (JSON)

{
  "version": 1,
  "source": "salesforce|hubspot|zoho|pipedrive|csv|custom",
  "id_path": "Account.Id",
  "fieldMap": {
    "business.legal_name": {"path": "Account.Name", "xform": "trim"},
    "business.ein": {"path": "Account.Tax_ID__c", "xform": "ein9"},
    "contact.email": {"path": "PrimaryContact.Email", "xform": "lower"}
  },
  "defaults": {"business.state": "NY"},
  "postRules": [
    {"if": {"missingAny": ["business.ein"]}, "set": {"confidence": 0.7}}
  ]
}


Transforms: trim, lower, upper, ucfirst, zip5, ein9, phone10, email, date, last4, coalesce, join, enumMap.

Mapping Studio (frontend)

Source (pick connector or paste sample JSON)

Map (drag CRM fields → canonical fields, choose transform, live preview)

Defaults & Rules (basic JSON editor)

Test (normalized preview + “missing/expired” list)

Publish (set as active version)

Ingestion API

POST /api/ingest/crm {source, record} → apply active mapping, upsert merchant, write field states (source="crm"), return normalized snapshot + missing/expired list.

5) OpenAI Parsing Pipeline (statements → metrics → offers)

Upload path: POST /api/bank/parse (multipart) → exactly 3 PDFs

If MOCK_MODE=true, return sample metrics.

Else:

Extract text (pdfminer/pymupdf)

Summarize/normalize with OpenAI (extract deposits, avg daily balance, NSF count, negative days per month)

Compute metrics:

avg_monthly_revenue

avg_daily_balance_3m

total_nsf_3m

total_days_negative_3m

Plaid path: /api/plaid/link-token, /api/plaid/exchange, /api/plaid/metrics (derive same metrics)

Offer engine: POST /api/offers with {metrics, overrides}

Math:

base = min(rev*1.2, adb*20)

tiers: {factor, fee, term_days, buy_rate?}[]

cap: (payback / avg_monthly_revenue) ≤ payback_to_monthly_rev

guardrails: decline if nsf > 3 or negative_days > 6

round amounts to $100; add expected_margin if buy_rate present

Optional: short OpenAI rationale per offer (if key present)

6) Triggers + Email notifications (including during mapping)

Trigger model

type Trigger = {
  id: string; name: string; enabled: boolean; priority: number;
  when: Condition;    // see below
  actions: Action[];  // sendEmail, callWebhook, notifyOps, scheduleFollowUp, etc.
};


Conditions (examples)

event.type in ["mapping.published","mapping.test.failed","ingest.success","ingest.missing_fields","intake.started","intake.completed","docs.uploaded","plaid.connected","metrics.ready","offers.generated","offers.none","offer.accepted","background.completed","contract.sent","contract.completed"]

tenantId == ...

missing_fields containsAny [ ... ]

Thresholds: metrics.total_nsf_3m > 3, etc.

Actions

sendEmail(templateId, to[], cc[], bcc[], subject?, overrides?)

callWebhook(url, method, bodyTemplateId)

notifyOps(channel, messageTemplateId)

scheduleFollowUp(days)

setStatus(name, value)

Email

Email connectors: SendGrid / Postmark / SES (store creds encrypted).

POST /api/email/templates (CRUD), POST /api/email/test

Templates use safe tokens: {{merchant.business.legal_name}}, {{missing_fields}}, {{intakeLink}}, etc.

Example: mapping-phase emails

On mapping.test.failed → email Admin: “Mapping failed: {{error}}”

On mapping.published → email Ops: “Mapping v{{version}} is now active.”

On ingest.missing_fields (from CRM) → email merchant or route to Ops with a magic link to the chat intake.

API

GET /api/triggers / POST /api/triggers / PUT /api/triggers/{id} / DELETE /api/triggers/{id}

Event bus: /api/events (append-only timeline & webhook fan-out)

7) Chatbot (human tone, ask-only-what’s-missing)

Detect merchant by token (from SMS/email link) or lookup (phone/email).

Ask-only-what’s-missing:

Missing required → ask

Expired → confirm (“Still at 24 Oak Ave?”)

Known & fresh → skip

Max 2 prompts at a time

Docs step: Upload 3 PDFs or Connect Plaid

Generate offers; Accept → start background (CLEAR).

On OK → send contract (DocuSign/Dropbox Sign).

On Review/Decline → trigger email to Ops/merchant per rules.

8) Embeddable widget + REST API

Use cases: embed in proprietary apps (sidebar), or on a subscriber’s website.

A) Widget script (deliver in /widget/lw.js)

Usage:

<div id="lw-chat" data-tenant="TENANT_ID" data-token="SIGNED_MERCHANT_TOKEN"></div>
<script src="https://YOURDOMAIN/widget/lw.js" async></script>


The script:

Injects a shadow-DOM container to avoid CSS conflicts

Loads the chat UI (iFrame or micro-frontend bundle)

Accepts attributes: data-tenant, data-token, data-theme="light|dark", data-primary="#111827"

Sends/receives events via postMessage:

Outbound: lw.event {type, merchantId, offerId, status}

Inbound: lw.command (open, close, setPersona, setTheme, etc.)

B) REST API (for any external app)

Merchants: GET /api/merchants/resolve?phone=&email=, GET /api/merchants/{id}, POST /api/merchants/import-csv

Intake: POST /api/intake/start, POST /api/intake/answer

Docs/Metrics: POST /api/bank/parse, POST /api/plaid/*, GET /api/metrics/{merchant_id}

Offers: POST /api/offers

Background: POST /api/background/check, GET /api/background/jobs/{id}

Sign: POST /api/sign/send, POST /api/sign/webhook

Triggers: GET/POST/PUT/DELETE /api/triggers

Email templates: GET/POST/PUT/DELETE /api/email/templates, POST /api/email/test

Events: GET /api/events?merchant_id=...

All write routes: require Authorization: Bearer ${API_KEY_PARTNER}; tenant scoping via X-Tenant-ID.

CORS & headers: expose CORS for widget domains; include Idempotency-Key on POSTs.

9) Frontend UX (clean + easy)

Design system: Tailwind + a minimal component kit (cards, inputs, chips, tabs, tables, toasts).

Pages

Dashboard: health, counts, latest events; seed demo data.

Chat: human microcopy, warm tone, validators, progress bar (“Ready for offers: ✅/❌”).

Connectors: all providers incl. Email & CRMs; Save + Validate + masked secrets.

Mapping Studio: Source → Map → Defaults/Rules → Test → Publish (with version history).

Triggers: Condition/Action builder + email preview, test trigger button.

Merchants: search, CSV import, open chat.

Offers Lab: tweak overrides (tiers/caps/buy_rate), run local math vs server.

Background & Sign: simple forms + status viewers.

Settings: API base/key, theme, idempotency toggle.

Accessibility: focus states, keyboard flows, large tap targets, readable contrast.

10) Security & compliance

TCPA: append “Reply STOP to opt out.” to any outreach preview.

PII: store SSN last-4 only in chat; collect full SSN later inside signing packet if required.

Secrets: Fernet encryption at rest; configs masked on read; no secrets in logs.

Rate limits + POST idempotency; structured audit events.

11) Seeds (first boot)

Two merchants (one existing with stale/missing fields to show the “ask-only-what’s-missing” behavior, one new).

Default offer overrides and email templates.

A couple of triggers:

mapping.published → email Admin: “Mapping v{{version}} active”

ingest.missing_fields → email Merchant with link to chat

offers.none → email Ops to review

12) Acceptance checklist (done = ✅)

✅ Connectors page exists (incl. Email connector) and validates.

✅ Mapping Studio can publish a mapping; /api/ingest/crm upserts merchants with normalized fields.

✅ Chat recognizes existing merchants and asks only missing/expired; max 2 prompts; validators on EIN/SSN4/phone/email.

✅ OpenAI parsing for 3 PDFs (or mock); metrics computed; offers generated; rationales if OpenAI key present.

✅ Triggers fire and send emails (mapping and intake/offer events) with templatized content.

✅ Widget script loads the chat on any page with data-tenant and optional data-token.

✅ REST API works (CORS, idempotency), secrets encrypted, logs clean.

Quick snippets
Widget embed
<div id="lw-chat" data-tenant="TENANT123" data-token="SIGNED_TOKEN" data-theme="light"></div>
<script src="https://YOURDOMAIN/widget/lw.js" async></script>

Example trigger (email on mapping publish)
{
  "name": "Notify admins on mapping publish",
  "enabled": true,
  "priority": 10,
  "when": { "kind": "equals", "field": "event.type", "value": "mapping.published" },
  "actions": [
    { "type": "sendEmail", "templateId": "tpl_mapping_published",
      "to": ["ops@company.com"], "subject": "Mapping v{{version}} is live for {{tenant.name}}" }
  ]
}

Email template example
Subject: {{subject}}

Hey team —
Mapping version {{version}} for {{tenant.name}} is now active.
Missing fields observed in last test: {{missing_fields}}

Open Mapping Studio: {{mappingStudioLink}}